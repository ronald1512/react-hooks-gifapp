{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACzBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAKjB,SACI,uBACQO,KAAK,OACLC,MAAOT,EACPU,SAlBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAON,IACtB,4BAAIA,QC4DDO,EAtDC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAqBd,EC5BwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAZAC,qBAAW,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEfC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAItB,CAACpB,IAEIqB,EDOwBO,CAAa5B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAKpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACX,qBAAKA,UAAU,YAAf,SAIOH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE5CxBkB,EAAe,WASxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MC1BjC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.559be39c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CategoryAdd = ({setcategories}) => { //aqui usamos desestructuracion porque en realidad esto viene dentro del objeto props\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit =(e) =>{\r\n        e.preventDefault(); /**Esto es para prevenir el comportamiento por defecto del formulario, que es recargar la página */\r\n\r\n        if(inputValue.trim().length>2){\r\n           setcategories( cats => [inputValue,...cats]);\r\n           setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (        \r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange= {handleInputChange}\r\n                />\r\n        </form>            \r\n    )\r\n}\r\n\r\n\r\n\r\nCategoryAdd.propTypes = {\r\n    setcategories:PropTypes.func.isRequired\r\n}\r\n","\r\n/**encodeURI: se encarga de reemplazar los espacios con %20. Para que la url no falle */\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=5Wri13KbG52JGsIrordT4hfl8luoDlIU`;\r\n    const resp = await fetch(url);\r\n    const {data}= await resp.json();\r\n    \r\n    const gifs = data.map(img => {\r\n        // Transformamos cada elemento!! Que facil!!!\r\n        return {\r\n            id: img.id,\r\n            title: img.title, \r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs; /**Ya que es async, no retorna el arreglo como tal, sino un promise que contiene el arreglo. */\r\n}\r\n//getGifs();","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt = {title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n/**useEffect: permite ejecutar cierto código de forma condicional. Aqui lo vamos a usar para que\r\n * no ejecute el de getGifs cada vez que identifique un cambio en algun state y tenga de renderizar de nuevo. \r\n*/\r\n\r\nconst GifGrid = ({category}) => {\r\n    // const [images, setImages] = useState([])\r\n    // useEffect(()=>{\r\n    //     getGifs(category).then(setImages);  //esto es lo mismo que haber hecho: imgs=> setImages(imgs)            -> es exactamente lo mismo\r\n    // }, [category]); //significa que esto quiero que se ejecute solo cuando es componente es renderizado por primera vez\r\n    \r\n    /**\r\n     * React Hook useEffect has a missing dependency: 'category'. \r\n     * Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n     * \r\n     * \r\n     * Este warning nos indica que si la 'category' cambia, entonces tendría que volver a ejecutar lo que está dentro del useEffect. Para \r\n     * permitirlo, solo basta añadir category en el [] de dependencias de useEffect.\r\n     * \r\n     */\r\n\r\n\r\n    /**             Comenté lo de arriba para a continuacion, usar mi custom hook\r\n     * \r\n     */\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            {/** usar && es una forma corta de hacer lo de abajo, si loading=true, va a evaluar el <p></p>  */}\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n             <div className=\"card-grid\">\r\n                \r\n\r\n                {\r\n                    images.map(img =>(\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}//de esta forma estoy mandando cada una de las propiedades de img como una propiedad independiente!!\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n//RECORDATORIO: Cuando no se ponen las llaves en una funcion de flecha, se hace un return implícito. \r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    //los efectos no pueden ser async!! \r\n    //Usamos el efecto para que solo se dispare cuando cambie la categoría. Y la primera vez que se 'renderiza' , esto ya que los custom hooks son como functional components\r\n    useEffect (()=>{\r\n        getGifs(category).then(imgs => {\r\n            //setTimeout(() => {\r\n                console.log(imgs);\r\n                setState({\r\n                    data: imgs, \r\n                    loading:false\r\n                });\r\n            //}, 3000);\r\n        })\r\n    },[category])\r\n\r\n    return state; //{data:[], loading:true}\r\n}","import React, { useState } from 'react'\r\nimport { CategoryAdd } from './components/CategoryAdd'\r\nimport GifGrid from './components/GifGrid'\r\n\r\n//Snippet: rafc\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    /**Si quiero agregar categories dinámicamente no puedo hacerlo de esta forma porque:\r\n     * Primero está declarado como constante\r\n     * Segundo, ¿Cómo le diria a react que hubo un cambio en categories y que necesito que vuelva a renderizar?\r\n     * \r\n     * Entonces, debemos usar el hook de useState, ya que necesitamos que categories cambie dinamicamente.\r\n    */\r\n\r\n    const [categories, setcategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = ()=>{\r\n    //     setcategories([...categories,'HunterXHunter']); //operador spreed!!\r\n    //     //O tambien se puede hacer asi: setCategories( cats => [...cats, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2> \r\n            <CategoryAdd setcategories={setcategories}/>\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map(category=> (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n/**React.StrictMode: Sirve para que react sea aún más estricto, pero es opcional dejarlo.*/\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}